//Generated by FuseIT WSDL2Apex (http://www.fuseit.com/Solutions/SFDC-Explorer/Help-WSDL-Parser.aspx)

@isTest
private class servicesWsIngfaceComWebSvcTest {
	
	@isTest static void coverGeneratedCodeTypes() {
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom parentObject = new servicesWsIngfaceCom();
		DOM.Document doc = new DOM.Document();
		DOM.XmlNode mockNode = doc.createRootElement('Envelope', 'http://schemas.xmlsoap.org/soap/envelope/', 'env');
		new servicesWsIngfaceCom.cliente(mockNode);				
		new servicesWsIngfaceCom.dataSeries(mockNode);				
		new servicesWsIngfaceCom.dataSeriesRequest(mockNode);				
		new servicesWsIngfaceCom.dataSeriesResponse(mockNode);				
		new servicesWsIngfaceCom.dispositivo(mockNode);				
		new servicesWsIngfaceCom.eliminaDispositivoRequest(mockNode);				
		new servicesWsIngfaceCom.eliminaEstablecimientoRequest(mockNode);				
		new servicesWsIngfaceCom.eliminaEstablecimientoResponse(mockNode);				
		new servicesWsIngfaceCom.eliminaSerieRequest(mockNode);				
		new servicesWsIngfaceCom.eliminaSerieResponse(mockNode);				
		new servicesWsIngfaceCom.eliminDispositivoResponse(mockNode);				
		new servicesWsIngfaceCom.enviarDispositivoResponse(mockNode);				
		new servicesWsIngfaceCom.enviarEfaceResponse(mockNode);				
		new servicesWsIngfaceCom.enviarEstablecimientoResponse(mockNode);				
		new servicesWsIngfaceCom.enviaSerieResponse(mockNode);				
		new servicesWsIngfaceCom.establecimiento(mockNode);				
		new servicesWsIngfaceCom.getSeriesResponse(mockNode);				
		new servicesWsIngfaceCom.helloResponse(mockNode);				
		new servicesWsIngfaceCom.insertDispositivoRequest(mockNode);				
		new servicesWsIngfaceCom.insertEfaceRequest(mockNode);				
		new servicesWsIngfaceCom.insertEstablecimientoRequest(mockNode);				
		new servicesWsIngfaceCom.insertResponse(mockNode);				
		new servicesWsIngfaceCom.insertResponseEface(mockNode);				
		new servicesWsIngfaceCom.insertSerieAutorizadaRequest(mockNode);				
		new servicesWsIngfaceCom.modificarDispositivoRequest(mockNode);				
		new servicesWsIngfaceCom.modificarDispositivoResponse(mockNode);				
		new servicesWsIngfaceCom.modificarEstablecimientoRequest(mockNode);				
		new servicesWsIngfaceCom.modificarEstablecimientoResponse(mockNode);				
		new servicesWsIngfaceCom.modificarSerieAutorizadaRequest(mockNode);				
		new servicesWsIngfaceCom.modificarSerieResponse(mockNode);				
		new servicesWsIngfaceCom.nitContribuyentesResponse(mockNode);				
		new servicesWsIngfaceCom.recuentoDocumentos(mockNode);				
		new servicesWsIngfaceCom.serie(mockNode);				
		new servicesWsIngfaceCom.verificaDocumentosResponse(mockNode);				
		servicesWsIngfaceCom.cliente Obj1 = new servicesWsIngfaceCom.cliente();
		Obj1.populateXmlNode(mockNode);
		servicesWsIngfaceCom.ParseDateTime('2014-11-05T13:15:30Z');
		servicesWsIngfaceCom.dataSeries Obj2 = new servicesWsIngfaceCom.dataSeries();
		Obj2.populateXmlNode(mockNode);
		servicesWsIngfaceCom.dataSeriesRequest Obj3 = new servicesWsIngfaceCom.dataSeriesRequest();
		Obj3.populateXmlNode(mockNode);
		servicesWsIngfaceCom.dataSeriesResponse Obj4 = new servicesWsIngfaceCom.dataSeriesResponse();
		Obj4.populateXmlNode(mockNode);
		servicesWsIngfaceCom.dispositivo Obj5 = new servicesWsIngfaceCom.dispositivo();
		Obj5.populateXmlNode(mockNode);
		servicesWsIngfaceCom.eliminaDispositivoRequest Obj6 = new servicesWsIngfaceCom.eliminaDispositivoRequest();
		Obj6.populateXmlNode(mockNode);
		servicesWsIngfaceCom.eliminaEstablecimiento Obj7 = new servicesWsIngfaceCom.eliminaEstablecimiento();
		Obj7.populateXmlNode(mockNode);
		servicesWsIngfaceCom.eliminaEstablecimientoRequest Obj8 = new servicesWsIngfaceCom.eliminaEstablecimientoRequest();
		Obj8.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.eliminaEstablecimientoResponse();
		servicesWsIngfaceCom.eliminaSerie Obj10 = new servicesWsIngfaceCom.eliminaSerie();
		Obj10.populateXmlNode(mockNode);
		servicesWsIngfaceCom.eliminaSerieRequest Obj11 = new servicesWsIngfaceCom.eliminaSerieRequest();
		Obj11.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.eliminaSerieResponse();
		servicesWsIngfaceCom.eliminDispositivo Obj13 = new servicesWsIngfaceCom.eliminDispositivo();
		Obj13.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.eliminDispositivoResponse();
		servicesWsIngfaceCom.enviarDispositivo Obj15 = new servicesWsIngfaceCom.enviarDispositivo();
		Obj15.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.enviarDispositivoResponse();
		servicesWsIngfaceCom.enviarEface Obj17 = new servicesWsIngfaceCom.enviarEface();
		Obj17.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.enviarEfaceResponse();
		servicesWsIngfaceCom.enviarEstablecimiento Obj19 = new servicesWsIngfaceCom.enviarEstablecimiento();
		Obj19.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.enviarEstablecimientoResponse();
		servicesWsIngfaceCom.enviaSerie Obj21 = new servicesWsIngfaceCom.enviaSerie();
		Obj21.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.enviaSerieResponse();
		servicesWsIngfaceCom.establecimiento Obj23 = new servicesWsIngfaceCom.establecimiento();
		Obj23.populateXmlNode(mockNode);
		servicesWsIngfaceCom.getSeries Obj24 = new servicesWsIngfaceCom.getSeries();
		Obj24.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.getSeriesResponse();
		servicesWsIngfaceCom.hello Obj26 = new servicesWsIngfaceCom.hello();
		Obj26.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.helloResponse();
		servicesWsIngfaceCom.insertDispositivoRequest Obj28 = new servicesWsIngfaceCom.insertDispositivoRequest();
		Obj28.populateXmlNode(mockNode);
		servicesWsIngfaceCom.insertEfaceRequest Obj29 = new servicesWsIngfaceCom.insertEfaceRequest();
		Obj29.populateXmlNode(mockNode);
		servicesWsIngfaceCom.insertEstablecimientoRequest Obj30 = new servicesWsIngfaceCom.insertEstablecimientoRequest();
		Obj30.populateXmlNode(mockNode);
		servicesWsIngfaceCom.insertResponse Obj31 = new servicesWsIngfaceCom.insertResponse();
		Obj31.populateXmlNode(mockNode);
		servicesWsIngfaceCom.insertResponseEface Obj32 = new servicesWsIngfaceCom.insertResponseEface();
		Obj32.populateXmlNode(mockNode);
		servicesWsIngfaceCom.insertSerieAutorizadaRequest Obj33 = new servicesWsIngfaceCom.insertSerieAutorizadaRequest();
		Obj33.populateXmlNode(mockNode);
		servicesWsIngfaceCom.modificarDispositivo Obj34 = new servicesWsIngfaceCom.modificarDispositivo();
		Obj34.populateXmlNode(mockNode);
		servicesWsIngfaceCom.modificarDispositivoRequest Obj35 = new servicesWsIngfaceCom.modificarDispositivoRequest();
		Obj35.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.modificarDispositivoResponse();
		servicesWsIngfaceCom.modificarEstablecimiento Obj37 = new servicesWsIngfaceCom.modificarEstablecimiento();
		Obj37.populateXmlNode(mockNode);
		servicesWsIngfaceCom.modificarEstablecimientoRequest Obj38 = new servicesWsIngfaceCom.modificarEstablecimientoRequest();
		Obj38.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.modificarEstablecimientoResponse();
		servicesWsIngfaceCom.modificarSerie Obj40 = new servicesWsIngfaceCom.modificarSerie();
		Obj40.populateXmlNode(mockNode);
		servicesWsIngfaceCom.modificarSerieAutorizadaRequest Obj41 = new servicesWsIngfaceCom.modificarSerieAutorizadaRequest();
		Obj41.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.modificarSerieResponse();
		servicesWsIngfaceCom.nitContribuyentes Obj43 = new servicesWsIngfaceCom.nitContribuyentes();
		Obj43.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.nitContribuyentesResponse();
		servicesWsIngfaceCom.recuentoDocumentos Obj45 = new servicesWsIngfaceCom.recuentoDocumentos();
		Obj45.populateXmlNode(mockNode);
		servicesWsIngfaceCom.serie Obj46 = new servicesWsIngfaceCom.serie();
		Obj46.populateXmlNode(mockNode);
		servicesWsIngfaceCom.verificaDocumentos Obj47 = new servicesWsIngfaceCom.verificaDocumentos();
		Obj47.populateXmlNode(mockNode);
		new servicesWsIngfaceCom.verificaDocumentosResponse();
	}
	@isTest static void coverCodeForeliminaEstablecimiento(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.eliminaEstablecimiento(null),'coverCodeForeliminaEstablecimiento');
	}
	@isTest static void coverCodeForeliminaSerie(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.eliminaSerie(null),'');
	}
	@isTest static void coverCodeForeliminDispositivo(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.eliminDispositivo(null),'');
	}
	@isTest static void coverCodeForenviarDispositivo(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviarDispositivo(null),'');
	}
	@isTest static void coverCodeForenviarEface(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviarEface(null),'');
	}
	@isTest static void coverCodeForenviarEstablecimiento(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviarEstablecimiento(null),'');
	}
	@isTest static void coverCodeForenviaSerie(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviaSerie(null),'');
	}
	@isTest static void coverCodeForgetSeries(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.getSeries(null),'');
	}
	@isTest static void coverCodeForhello(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.hello(null),'');
	}
	@isTest static void coverCodeFormodificarDispositivo(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.modificarDispositivo(null),'');
	}
	@isTest static void coverCodeFormodificarEstablecimiento(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.modificarEstablecimiento(null),'');
	}
	@isTest static void coverCodeFormodificarSerie(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.modificarSerie(null),'');
	}
	@isTest static void coverCodeFornitContribuyentes(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.nitContribuyentes(null, null, null),'');
	}
	@isTest static void coverCodeForverificaDocumentos(){
		Test.setMock(WebServiceMock.class, new servicesWsIngfaceComMockImpl());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.verificaDocumentos(null, null, null, null, null, null, null),'');
    }
    /*
	@isTest static void coverCodeForeliminaEstablecimiento_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.eliminaEstablecimiento_Http(null),'');		
	}
	@isTest static void coverCodeForeliminaSerie_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.eliminaSerie_Http(null),'');		
	}
	@isTest static void coverCodeForeliminDispositivo_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.eliminDispositivo_Http(null),'');		
	}
	@isTest static void coverCodeForenviarDispositivo_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviarDispositivo_Http(null),'');		
	}
	@isTest static void coverCodeForenviarEface_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviarEface_Http(null),'');		
	}
	@isTest static void coverCodeForenviarEstablecimiento_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviarEstablecimiento_Http(null),'');		
	}
	@isTest static void coverCodeForenviaSerie_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.enviaSerie_Http(null),'');		
	}
	@isTest static void coverCodeForgetSeries_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.getSeries_Http(null),'');		
	}
	@isTest static void coverCodeForhello_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.hello_Http(null),'');		
	}
	@isTest static void coverCodeFormodificarDispositivo_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.modificarDispositivo_Http(null),'');		
	}
	@isTest static void coverCodeFormodificarEstablecimiento_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.modificarEstablecimiento_Http(null),'');		
	}
	@isTest static void coverCodeFormodificarSerie_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.modificarSerie_Http(null),'');		
	}
	@isTest static void coverCodeFornitContribuyentes_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.nitContribuyentes_Http(null, null, null),'');		
	}
	@isTest static void coverCodeForverificaDocumentos_Http(){
		Test.setMock(HttpCalloutMock.class, new servicesWsIngfaceComHttpMock());
		servicesWsIngfaceCom.ingfaceWsServicesPort testObject = new servicesWsIngfaceCom.ingfaceWsServicesPort();
		System.assertEquals(null, testObject.verificaDocumentos_Http(null, null, null, null, null, null, null),'');		
    }
    */
}
